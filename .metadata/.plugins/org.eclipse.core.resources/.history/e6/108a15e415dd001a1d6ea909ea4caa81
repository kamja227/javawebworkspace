package com.bit.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDao {
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	public EmployeeDao() throws SQLException{
		
		try { // jdbc connect j 라이브러리 로딩 예외 처리
			Class.forName("com.mysql.cj.jdbc.Driver"); // 해당 클래스가 메모리에 로드 및 실행
			String url = "jdbc:mysql://192.168.0.216:2080/lmssystem?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false";
			// String url = "jdbc:mysql://localhost:3306/lmssystem?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false";
			String user = "server3zo";
			// String user = "root";
			String password = "123456";
			
			conn = DriverManager.getConnection(url, user, password);
		} catch (ClassNotFoundException e) {
			System.out.println("ClassNotFoundException: " + e.getMessage());
		} 
	}

	public EmployeeDto login(String userId, String password) {
		String sql = "select * from Employee where deleted=0 and userId=? and password=?";
		EmployeeDto bean = null;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			pstmt.setString(2, password);
			rs = pstmt.executeQuery();
			if(rs.next()){
				bean = new EmployeeDto();
				bean.setEmployeeIdx(rs.getInt("employeeIdx"));
				bean.setUserId(rs.getString("userId"));
				bean.setPassword(rs.getString("password"));
				bean.setName(rs.getString("name"));
				bean.setContact(rs.getString("contact"));
				bean.setEmail(rs.getString("email"));
				bean.setDepartment(rs.getString("department"));
				bean.setLevel(rs.getInt("level"));
				bean.setDeleted(rs.getInt("deleted"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally{
			try {
				if(rs != null) rs.close();
				if(conn != null) conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return bean;
	} // login end
	
	public ArrayList<EmployeeDto> selectAll(){		
		ArrayList<EmployeeDto> list = new ArrayList<EmployeeDto>();
		String sql = "select * from Employee where deleted = 0 and  order by employeeIdx asc";
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();		
			while(rs.next()){
				list.add(new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
						rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
						rs.getString("department"), rs.getInt("level"), rs.getInt("deleted")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return list;
	} // selectAll end
	
	public ArrayList<EmployeeDto> departmentAll(String department){ // 부서별
		ArrayList<EmployeeDto> list = new ArrayList<EmployeeDto>();
		String sql = "select * from Employee where deleted = 0 and department=? order by employeeIdx asc";
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, department);
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				list.add(new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
						rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
						rs.getString("department"), rs.getInt("level"), rs.getInt("deleted")));
			}
			return list;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
		
		// 강사
		public ArrayList<EmployeeDto> getGangsaList(){
			ArrayList<EmployeeDto> list = new ArrayList<EmployeeDto>();
			String sql = "select * from Employee where deleted = 0 and level=2 order by employeeIdx asc";
			try {
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				
				while(rs.next()){
					list.add(new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
							rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
							rs.getString("department"), rs.getInt("level"), rs.getInt("deleted")));
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				try {
					if(rs != null) rs.close();
					if(pstmt != null) pstmt.close();
					if(conn != null) conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		
		return list;
	} // getGangsaList end
		
		// 담당 매니저 아닌 리스트 가져오기 (교육과정 등록)
		public ArrayList<EmployeeDto> getChangeableManagerList(){
			ArrayList<EmployeeDto> list = new ArrayList<EmployeeDto>();
			String sql = "select * from employee where deleted=0 and manageclass=0 and department='행정부'";
			try {
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				
				while(rs.next()){
					list.add(new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
							rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
							rs.getString("department"), rs.getInt("level"), rs.getInt("deleted")));
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				try {
					if(rs != null) rs.close();
					if(pstmt != null) pstmt.close();
					if(conn != null) conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		
		return list;
	} // getGangsaList end
		
		// 담당 매니저 아닌 리스트 혹은 그 반의 담당 매니저 가져오기
				public ArrayList<EmployeeDto> getNewManagerList(int managerIdx){
					ArrayList<EmployeeDto> list = new ArrayList<EmployeeDto>();
					String sql = "select * from employee where (deleted=0 and manageclass=0 and department=행정부') or (deleted=0 and manageclass = ?)";
					try {
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, managerIdx);
						rs = pstmt.executeQuery();
						
						while(rs.next()){
							list.add(new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
									rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
									rs.getString("department"), rs.getInt("level"), rs.getInt("deleted")));
						}
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						try {
							if(rs != null) rs.close();
							if(pstmt != null) pstmt.close();
							if(conn != null) conn.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
				
				return list;
			} // getGangsaList end
		
	
	public EmployeeDto selectOne(int employeeIdx) {
		EmployeeDto bean = null;
		String sql = "select * from Employee where deleted = 0 and employeeIdx = ?";
		try {
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, employeeIdx);
			rs = pstmt.executeQuery();
			
			if(rs.next()){
				bean = new EmployeeDto(rs.getInt("employeeIdx"), rs.getString("userId"), rs.getString("password"), 
						rs.getString("name"), rs.getString("contact"), rs.getString("email"), 
						rs.getString("department"), rs.getInt("level"), rs.getInt("deleted"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}		
		return bean;
	} // selectOne end
	

	public int updateOne(int employeeIdx, String password, String name, String contact, String email, String department, int level, int deleted) throws SQLException {
		String sql = "update Employee set password=?, name=?, contact=?, email=?, department=?, level=?, "
				+ "deleted=? where employeeIdx=?";
		try{
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, password);
			pstmt.setString(2, name);
			pstmt.setString(3, contact);
			pstmt.setString(4, email);
			pstmt.setString(5, department);
			pstmt.setInt(6, level);
			pstmt.setInt(7, deleted);
			pstmt.setInt(8, employeeIdx);
			
			return pstmt.executeUpdate();
		}finally{
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
	} // updateOne end
	
	// 계정 삭제
		public int deleteOne(int employeeIdx) throws SQLException {
			String sql = "update Employee set deleted=1 where deleted=0 and employeeIdx=?";
			try{
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, employeeIdx);
				
				return pstmt.executeUpdate();
			}finally{
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			}
		} // deleteOne end
		
	
	public int rowCount() throws SQLException{
		String sql = "select count(*) as cnt from Employee where deleted=0";
		try{
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) return rs.getInt("cnt");
		} finally{
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(conn != null) conn.close();
		}
		return 0;
	} // rowCount end
	

}
